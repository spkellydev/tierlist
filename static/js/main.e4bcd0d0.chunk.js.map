{"version":3,"sources":["MTGCard/index.js","App.js","serviceWorker.js","index.js"],"names":["MTGCard","props","state","card","getCardData","data","set","then","setState","url","Card","axios","a","res","sc","Image","image_uris","art_crop","TypeLine","type_line","OracleText","oracle_text","Legalities","legalities","SetName","set_name","Power","power","Toughness","toughness","ScryFall","scryfall_uri","size","alt","this","src","Content","Item","style","minHeight","subtitle","href","title","React","Component","App","onSetDropdownChange","e","selectedSet","sets","name","cards","CMC","Color","Tier","columns","colors","selectedColor","Tabletop","init","key","callback","fullName","THB","elements","columnNames","ELD","simpleSheet","i","value","onChange","map","className","type","fullwidth","align","color","Tab","active","onClick","onColorTabClick","filter","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4bcd0d0.chunk.js","sourcesContent":["import React from 'react';\nimport * as axios from \"axios\";\nimport { Card, Media, Heading, Content } from 'react-bulma-components';\nimport \"./MTGCard.css\";\n\nclass MTGCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            card: {}\n        }\n        this.getCardData(props.data, props.set).then(card => {\n            this.setState({\n                card\n            })\n        })\n    }\n\n    getCardData(card, set) {\n        const baseUrl = \"https://api.scryfall.com/cards/named?fuzzy=\";\n        let url = baseUrl + card.Card + \"&set=\" + set;\n        return axios.get(url).then(async res => {\n          let sc = await res.data;\n          card.Image = sc.image_uris.art_crop;\n          card.TypeLine = sc.type_line;\n          card.OracleText = sc.oracle_text;\n          card.Legalities = sc.legalities;\n          card.SetName = sc.set_name;\n          card.Power = sc.power;\n          card.Toughness = sc.toughness;\n          card.ScryFall = sc.scryfall_uri;\n          return card;\n        })\n      }\n\n      render() {\n          return (\n            <Card>\n                <Card.Image size=\"4by3\" alt={this.state.card.Card} src={this.state.card.Image} />\n                <Card.Content>\n                    <Media>\n                        <Media.Item>\n                            <Heading size={5}>{this.state.card.Card}</Heading>\n                            <Heading style={{ minHeight: 40 }} subtitle size={6}>{this.state.card.TypeLine}</Heading>\n                        </Media.Item>\n                    </Media>\n                    <Content>\n                        {/* <div className=\"content is-small\">\n                            <p>{this.state.card.CMC}</p>\n                            <p>{this.state.card.Color}</p>\n                            <p>\n                                <span>Tier: {this.state.card.Tier}</span>\n                                <span>Power: {this.state.card.Power}</span>\n                                <span>Toughness: {this.state.card.Toughness}</span>\n                            </p>\n                            <p>{this.state.card.OracleText}</p>\n                        </div> */}\n                        <a href={this.state.card.ScryFall} title={this.state.card.Card}>Scryfall Url</a>\n                    </Content>\n                </Card.Content>\n            </Card>\n        )\n      }\n}\n\nexport default MTGCard","import React, { Component } from 'react';\nimport './App.css';\nimport Tabletop from 'tabletop';\nimport { Container, Columns, Tabs, Dropdown } from 'react-bulma-components'\nimport MTGCard from './MTGCard';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sets: [{name: \"\", cards: [{ CMC: \"\", Card: \"\", Color: \"\", Tier: \"\", Image: \"\"}], columns: []}],\n      columns: [\"CMC\", \"Card\", \"Color\", \"Tier\"],\n      colors: [\"White\", \"Black\", \"Blue\", \"Red\", \"Green\", \"Multicolor\", \"No Color\", \"Land\"],\n      selectedColor: 0,\n      selectedSet: 0\n    }\n  }\n\n  componentDidMount() {\n    Tabletop.init({\n      key: '1i6Y9LqjGuQrrh415vxZPAHgRQsAJaabhFJGG7S-60eU',\n      callback: data => {\n        this.setState({\n          sets: [{name: \"THB\", fullName: \"Theros, Beyond Death\", cards: data.THB.elements, columns: data.THB.columnNames}, {name: \"ELD\", fullName: \"Throne of Eldraine\", cards: data.ELD.elements, columns: data.ELD.columnNames}]\n        })\n      },\n      simpleSheet: false\n    })\n  }\n\n  onColorTabClick(e, i) {\n    this.setState({ selectedColor: i }); \n  }\n\n  onSetDropdownChange = (e) => {\n    this.setState({ selectedSet: e })\n  }\n\n  render() {\n    return (\n        <Container>\n            <Dropdown value={this.state.selectedSet} onChange={this.onSetDropdownChange}>\n              {this.state.sets.map((set, i) => (\n                <Dropdown.Item className=\"is-size-5\" key={set.name} value={i}>{set.fullName}</Dropdown.Item>\n              ))}\n            </Dropdown>\n            <Tabs type=\"boxed\" fullwidth={true} align=\"centered\">\n              {this.state.colors.map((color, i) => (\n                <Tabs.Tab key={color} active={i === this.state.selectedColor} onClick={(e) => this.onColorTabClick(e, i)}>\n                  {color}\n                </Tabs.Tab>\n              ))}\n            </Tabs>\n            {this.state.sets.filter((set, i) => i === this.state.selectedSet).map(set => (\n              <div key={set.name}>\n                <section>\n                  <div>\n                    <Columns>\n                    {set.cards.filter(card => card.Color === this.state.colors[this.state.selectedColor]).map(card => (\n                      <Columns.Column key={card.Card} size=\"one-quarter\">\n                        <MTGCard key={card.Card} set={set.name} data={card} />\n                      </Columns.Column>\n                    ))}\n                    </Columns>\n                  </div>\n                </section>\n              </div>\n            ))}\n        </Container>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}